{
	"BLOGS":[
		{
			"title": "关于本站",
			"date": "2016.02.15",
			"content": "----------Update---------\n\n说一下project页面下面有箭头可以向左向右的。。然后增加了google analytics\n\n--------Update-------\n\n增加了[Disqus](https://disqus.com/home/explore/)作为评论系统，遗憾的是不能改字体。\n\n--------原文--------\n\n春节不上班，闲来无事就在家里写了一个个人网页。\n\n其实本意是想介绍一下自己，算是一份小小的简历，但在是否将博客功能嵌入这个问题上纠结许久，最后还是想直接集成在一个网页中。目前还没有用市面上的一些Blog框架，之后会考虑使用[Jekyll](http://jekyllrb.com)，不过都是后话了。\n\n说说用到的技术吧。\n\nLow Poly图用的是[Polyvia](http://zhangwenli.com/Polyvia/)做的，操作svg用[SVG.js](http://svgjs.com)，动画纯收撸。\n\n导航栏按钮的动画用[Segment.js](http://lmgonzalves.github.io/segment/)。\n\n博客部分，后台php，没用数据库，直接读json文件，这部分之后肯定会改用成熟的框架。写的是markdown，用[markdown.js](https://github.com/evilstreak/markdown-js/)转换成html.\n\nProjects和Me部分只是写了一些css3的动画，没有什么特殊的技巧。很多参考了[codrops](http://tympanus.net/codrops/category/tutorials/)这个网站，大家也可以去看看。\n\n[nprogess.js](https://github.com/rstacruz/nprogress)来做loading时的进度条，[Pjax](https://github.com/defunkt/jquery-pjax)做页面的跳转。\n\n大概就是这些，UI设计正在尝试突破，希望你会喜欢。"
		},
		{
			"title": "一些关于ARC的",
			"date": "2016.02.22",
			"content": "刚看了*《Objective-C高级编程 iOS与OS X多线程和内存管理》*的第一章，非常有意思，主要讲的是iOS中新引进的ARC系统。\n\n相信大部分人都很熟悉ARC系统了，其实本质上来说就是增加一个retainCount引用计数，来表示*当前有多少变量在使用一个对象*。如果计数为0，则销毁这个对象，因此大部分的销毁变量的代码都省去了，因为编译器会自动帮我们搞定这些。\n\n\n\n这是ARC的思想，c++中shared_ptr, weak_ptr也是这么实现的。\n\n然而java管理内存用的是另一套东西：*垃圾收集器(Garbage Collector)*。GC会在每一个对象上增加一个字段，用来指向这个对象引用的其他对象。如果在一个代码块结束的时候，有一个对象没有任何其他对象去引用，那么他就是没用的，可以把他回收了，这也是很符合常理的对吧。其数据结构抽象出来我自己觉得很像一棵树，大家可以想象一下。\n\n\n\n回到ARC，虽然很好用，但是也有问题，会产生循环引用。概念就不必多说了，我们只要加上__weak修饰符就可以。虽然看上去这样的解决方法很优雅，但是也有问题，因为__weak修饰符不会持有对象，因此我们在使用带有__weak修饰符的对象时，还是会创建一个__strong的临时变量，并把他注册到autoreleasepool。像这样的一段代码: \n\n\t@autoreleasepool {\n\n\t\tid __strong obj = [[NSObject alloc] init];\n\n\t\tid __weak obj2 = obj;\n\n\t\tNSLog(@\"so?\", _objc_root_RetainCount(obj));\n\n\t}\n\n最终会输出2。当我们离开这个块的时候，__strong的obj会release一次，在autoreleasepool中的临时变量会release一次，因此obj的计数为0，可以销毁，这在使用上没有问题。问题在于，每次使用__weak类型的对象，都会创建一个临时变量并注册，这对cpu的负载是相当之大的，所以还是少用为妙，只有在循环引用时才使用。\n\n对了，现在常用@property属性声明，其属性和修饰符对应关系如下：\n\n\tassign\t\t\t\t__unsafe_unretained\n\n\tcopy\t\t\t\t__strong\n\n\tretain\t\t\t\t__strong\n\n\tstrong\t\t\t\t__strong\n\n\tunsafe_untained\t\t\t__unsafe_unretained\n\n\tweak\t\t\t\t__weak\n\nThat's all."
		}
	]
}